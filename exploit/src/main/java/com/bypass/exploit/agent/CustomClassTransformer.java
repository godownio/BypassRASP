package com.bypass.exploit.agent;

import org.objectweb.asm.*;
import sun.management.Agent;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.lang.instrument.Instrumentation;
import java.lang.instrument.UnmodifiableClassException;
import java.security.ProtectionDomain;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import static org.objectweb.asm.Opcodes.ASM5;

public class CustomClassTransformer implements ClassFileTransformer {
    private Instrumentation inst;
    private static List<MethodHookDesc> expClassList = new ArrayList<MethodHookDesc>();

    static {
        expClassList.add(new MethodHookDesc("java.lang.ProcessBuilder", "start",
                "()Ljava/lang/Process;"));
    }

    @Override
    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        final String class_name = className.replace("/", ".");

        for (final MethodHookDesc methodHookDesc : expClassList) {
            if (methodHookDesc.getHookClassName().equals(class_name)) {
                final ClassReader classReader = new ClassReader(classfileBuffer);
                ClassWriter classWriter = new ClassWriter(classReader, ClassWriter.COMPUTE_MAXS);
                final int api = ASM5;

                try {
                    ClassVisitor classVisitor = new ClassVisitor(api, classWriter) {
                        @Override
                        public MethodVisitor visitMethod(int i, String s, String s1, String s2, String[] strings) {
                            final MethodVisitor methodVisitor = super.visitMethod(i, s, s1, s2, strings);

                            if (methodHookDesc.getHookMethodName().equals(s) && methodHookDesc.getHookMethodArgTypeDesc().equals(s1)) {
                                return new MethodVisitor(api, methodVisitor) {
                                    @Override
                                    public void visitCode() {
                                        super.visitCode();
                                        // 插入打印 "break!attack!" 的字节码
                                        methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
                                        methodVisitor.visitLdcInsn("break!attack!");
                                        methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
                                        //抛出异常
                                        methodVisitor.visitTypeInsn(Opcodes.NEW, "java/lang/RuntimeException");
                                        methodVisitor.visitInsn(Opcodes.DUP);
                                        methodVisitor.visitLdcInsn("ProcessBuilder.start() is blocked by RASP");
                                        methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;)V", false);
                                        methodVisitor.visitInsn(Opcodes.ATHROW);

                                    }
                                };
                            }
                            return methodVisitor;
                        }
                    };
                    classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);
                    classfileBuffer = classWriter.toByteArray();
                }catch (Throwable t) {
                    t.printStackTrace();
                }
            }
        }
        return classfileBuffer;
    }
    public static void agentmain(String agentArgs, Instrumentation inst) throws UnmodifiableClassException {
//        for (Class clazz : inst.getAllLoadedClasses()) {
//            System.out.println(clazz.getName());
//        }
        inst.addTransformer(new CustomClassTransformer(),true);
        Class[] loadedClasses = inst.getAllLoadedClasses();
        for (Class clazz : loadedClasses) {
            if ("java.lang.ProcessBuilder".equals(clazz.getName())) {
                if (inst.isModifiableClass(clazz) && !clazz.getName().startsWith("java.lang.invoke.LambdaForm")) {
                    inst.retransformClasses(clazz);
                }
            }
        }
    }
}